name: Android Build Pipeline
on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Fix repository sources
        run: |
          sudo sed -i 's/http:/https:/g' /etc/apt/sources.list
          sudo sed -i 's/archive.ubuntu.com/mirrors.kernel.org/g' /etc/apt/sources.list

      - name: Install system dependencies
        run: |
          # Повторяем попытку обновления пакетов
          for i in {1..3}; do
            sudo apt-get update -y && break || sleep 15
          done
          
          # Устанавливаем зависимости с повторными попытками
          sudo apt-get install -y --no-install-recommends \
            openjdk-17-jdk \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            pkg-config \
            libgl1-mesa-dev \
            gradle-7.6 \
            tree || \
          (sudo apt-get install -f -y && \
           sudo apt-get install -y --no-install-recommends \
            openjdk-17-jdk \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            pkg-config \
            libgl1-mesa-dev \
            gradle-7.6 \
            tree)

          # Явная установка Java 17
          sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java

      - name: Clean environment
        run: |
          rm -rf ~/.gradle/
          rm -rf ~/.cache/pip/
          rm -rf __pycache__/
          rm -rf .pytest_cache/

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip wheel
          pip install --force-reinstall briefcase toga-android pygame
          pip list

      - name: Verify environment
        run: |
          echo "=== Environment Verification ==="
          echo "Python: $(python --version)"
          echo "Pip: $(pip --version)"
          echo "Briefcase: $(briefcase --version)"
          echo "Java: $(java -version 2>&1 | head -n 1)"
          echo "Gradle: $(gradle --version | head -n 3)"
          echo "SDL2: $(sdl2-config --version)"

      - name: Prepare project structure
        run: |
          mkdir -p memorymaster
          [ -f app.py ] && mv app.py memorymaster/ || echo "app.py not found"
          [ -f words.txt ] && mv words.txt memorymaster/ || echo "words.txt not found"
          echo "MIT License" > LICENSE
          echo "=== Project Structure ==="
          tree

      - name: Build Android APK
        run: |
          set -ex
          export SDL2_DIR=/usr/lib/x86_64-linux-gnu/cmake/SDL2
          export GRADLE_OPTS="-Dorg.gradle.daemon=false"
          
          # Clean previous builds
          rm -rf android/ build/ dist/
          
          # Create project
          briefcase create android -v
          
          # Force Gradle 7.6
          cd android
          ./gradlew wrapper --gradle-version 7.6 --distribution-type bin
          cd ..
          
          # Build with debug info
          briefcase build android -v
          
          # Verify outputs
          echo "=== Build Outputs ==="
          find android -name "*.apk" -o -name "*.aab" | while read f; do
            echo "Found: $f ($(du -h $f | cut -f1))"
          done

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: |
            android/**/outputs/apk/**/*.apk
            android/**/outputs/bundle/**/*.aab
          retention-days: 7

      - name: Archive logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            **/logs/
            **/build/reports/
            **/*.log
          retention-days: 7